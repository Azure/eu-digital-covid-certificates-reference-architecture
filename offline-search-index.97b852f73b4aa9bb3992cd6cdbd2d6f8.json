




























[{"body":"Gather the required variables:\nDev # OID of the Group to grant Administrator permissions. This is used to allow access to the deployed AKS cluster for deployments and troubleshooting administrator_group_oid = \"\" # List of network prefixes allowed to SSH to Jumpbox VM jumpbox_ssh_source_address_prefixes = [] # Location Name location = \"\" # Resource Name Prefix. Should be less than 6 chars. This is used to make sure some resource names are globally unique for some azure resources that require unique names (like Key Vault and Azure Container Registries) prefix = \"\" # Subscription to deploy into subscription_id = \"\" # Tenant to deploy into tenant_id = \"\" EU # OID of the Group to grant Administrator permissions administrator_group_oid = \"\" # Enable the creation of azurerm_log_analytics_workspace and azurerm_log_analytics_solution or not enable_log_analytics_workspace = false # Version Number of the Gateway gateway_version = \"1.1.3-44c8778-azure-0.0.1-5f09fbf\" # Generation number to be appended to certain resource names (e.g. Purge Protected KeyVault's). Changing this value can only be done during a fresh deployment. generation = 1 # GitHub Container Registry Password ghcr_password = \"\" # GitHub Container Registry Username ghcr_username = \"\" # The RSA Key for the Jump Box, required for remote executing code over SSH jump_box_identity_file = \"\" # The Host address for the Jump Box, required for remote executing code over SSH jump_box_identity_host = \"\" # The User for the Jump Box to authenticate, required for remote executing code over SSH jump_box_identity_user = \"\" # Location Name location = \"\" # Enable the sending of Azure Log Workspace to Log Analytics Analytics Custer ID supplied log_analytics_cluster_id = \"\" # Parent DNS Zone Name parent_dns_zone_name = \"\" # Parent DNS Zone Resource Group Name parent_dns_zone_rg_name = \"\" # Resource Name Prefix. Should be less than 6 chars. This is used to make sure some resource names are globally unique for some azure resources that require unique names (like Key Vault and Azure Container Registries) prefix = \"\" # Subscription to deploy into subscription_id = \"\" # Tenant to deploy into tenant_id = \"\" # Tag of the Utility Image to import utility_image_tag = \"0.0.1-c5b4119\" IE # OID of the Group to grant Administrator permissions. This is used to allow access to the jumpboxes for deployments and troubleshooting administrator_group_oid = \"\" # Version Number of the Business Rules Service businessrule_service_version = \"1.1.2-b0be8f4-azure-0.0.1-1293959\" # Enable the creation of azurerm_log_analytics_workspace and azurerm_log_analytics_solution or not enable_log_analytics_workspace = false # Generation number to be appended to certain resource names (e.g. Purge Protected KeyVault's). Changing this value can only be done during a fresh deployment. generation = 1 # GitHub Container Registry Password ghcr_password = \"\" # GitHub Container Registry Username ghcr_username = \"\" # Version Number of the Issuance Service issuance_service_version = \"1.0.5-7408b55-azure-0.0.1-1293959\" # Version Number of the Issuance Web issuance_web_version = \"1.1.2-45daa28-azure-0.0.1-1293959\" # The RSA Key for the Jump Box, required for remote executing code over SSH jump_box_identity_file = \"\" # The Host address for the Jump Box, required for remote executing code over SSH jump_box_identity_host = \"\" # The User for the Jump Box to authenticate, required for remote executing code over SSH jump_box_identity_user = \"\" # Location Name location = \"\" # Enable the sending of Azure Log Workspace to Log Analytics Analytics Custer ID supplied log_analytics_cluster_id = \"\" # version of the msal docker image to use msal_proxy_version = \"latest\" # Tag of the Nginx Image to import nginx_image_tag = \"1.21.1\" # Parent DNS Zone Name parent_dns_zone_name = \"\" # Parent DNS Zone Resource Group Name parent_dns_zone_rg_name = \"\" # Resource Name Prefix. Should be less than 6 chars. This is used to make sure some resource names are globally unique for some azure resources that require unique names (like Key Vault and Azure Container Registries) prefix = \"\" # Subscription to deploy into subscription_id = \"\" # Tenant to deploy into tenant_id = \"\" # Tag of the Utility Image to import utility_image_tag = \"0.0.1-c5b4119\" # Version Number of the Verifier Service verifier_service_version = \"1.0.4-5888cb7-azure-0.0.1-1293959\" ","categories":"","description":"","excerpt":"Gather the required variables:\nDev # OID of the Group to grant …","ref":"/terraform/variables/","tags":"","title":"Installation - Variables"},{"body":"Prerequisites  Java JDK. The app has been sucessfully build with JDK 8 and JDK 11, but other later versions should also build the app correctly. We will be also use the keytool from Java JDK to generate the signing certificates for testing. Android SDK required to compress and align the aplication to apk format. Android studio must be started at least once, so it downloads all the additional build tools. Apk signing certificates.  Android Wallet Build Android Wallet app, can be downloaded from TODO, and introduce the URL and the certificates at runtime, but it is also possible to build it. The source code for the wallet app, can be found in the git repository: git@ssh.dev.azure.com:v3/PE-COE/EU-Digital-Green-Certificate/dgca-wallet-app-android. The app, depends on another packages of the same project, which needs to be cloned/downloaded before attempting to run the build. The three repositories, wallet app, and the two depencendies listed below, needs to be placed under the same folder structure.\n app-core-android git@ssh.dev.azure.com:v3/PE-COE/EU-Digital-Green-Certificate/dgca-app-core-android dgc-certlogic-android git@ssh.dev.azure.com:v3/PE-COE/EU-Digital-Green-Certificate/dgc-certlogic-android  Build #Update the paths and versions to your specific platform and installation, MAC os and android SDK have been successfully tested. export ANDROID_SDK_VERSION=\"31.0.0\" export ANDROID_BUILD_TOOLS_PATH=~/\"Library/Android/sdk/build-tools/$ANDROID_SDK_VERSION\" git clone git@ssh.dev.azure.com:v3/PE-COE/EU-Digital-Green-Certificate/dgca-wallet-app-android git clone git@ssh.dev.azure.com:v3/PE-COE/EU-Digital-Green-Certificate/dgca-app-core-android git clone git@ssh.dev.azure.com:v3/PE-COE/EU-Digital-Green-Certificate/dgc-certlogic-android pushd dgca-wallet-app-android ./gradlew --no-daemon build ${ANDROID_BUILD_TOOLS_PATH}/zipalign -v 4 app/build/outputs/apk/acc/release/app-acc-release-unsigned.apk app/build/outputs/apk/acc/release/app-acc-release-zipaligned.apk #Generate the certs to sign the applicaion keytool -genkeypair -alias dgca-wallet-sign-cert -keypass dgca-wallet-sign-cert -keystore dgca-wallet-sign-cert.jks -storepass dgca-wallet-sign-cert #Sign the apk with the certificate created in the pre-requisites. ${ANDROID_BUILD_TOOLS_PATH}/apksigner sign --ks ./dgca-wallet-sign-cert.jks --ks-pass pass:dgca-wallet-sign-cert --ks-key-alias dgca-wallet-sign-cert --key-pass pass:dgca-wallet-sign-cert --verbose ./app/build/outputs/apk/acc/release/app-acc-release-zipaligned.apk popd Android Verifier Build Similarly to the wallet app, it can be downloaded from TODO, in order to build it yourself, you can follow the script below.\n#Update the paths and versions to your specific platform and installation, MAC os and android SDK have been successfully tested. export ANDROID_SDK_VERSION=\"31.0.0\" export ANDROID_BUILD_TOOLS_PATH=~/\"Library/Android/sdk/build-tools/$ANDROID_SDK_VERSION\" git clone git@ssh.dev.azure.com:v3/PE-COE/EU-Digital-Green-Certificate/dgca-verifier-app-android git clone git@ssh.dev.azure.com:v3/PE-COE/EU-Digital-Green-Certificate/dgca-app-core-android git clone git@ssh.dev.azure.com:v3/PE-COE/EU-Digital-Green-Certificate/dgc-certlogic-android pushd dgca-verifier-app-android ./gradlew --no-daemon build ${ANDROID_BUILD_TOOLS_PATH}/zipalign -v 4 app/build/outputs/apk/acc/release/app-acc-release-unsigned.apk app/build/outputs/apk/acc/release/app-acc-release-zipaligned.apk #Generate the certs to sign the applicaion keytool -genkeypair -alias dgca-verifier-sign-cert -keypass dgca-verifier-sign-cert -keystore dgca-verifier-sign-cert.jks -storepass dgca-verifier-sign-cert #Sign the apk with the certificate created in the pre-requisites. ${ANDROID_BUILD_TOOLS_PATH}/apksigner sign --ks ./dgca-verifier-sign-cert.jks --ks-pass pass:dgca-verifier-sign-cert --ks-key-alias dgca-verifier-sign-cert --key-pass pass:dgca-verifier-sign-cert --verbose app/build/outputs/apk/acc/release/app-acc-release-zipaligned.apk ","categories":"","description":"Description of how to build the Android Apps\n","excerpt":"Description of how to build the Android Apps\n","ref":"/mobile-apps/build/","tags":"","title":"Android Build"},{"body":"Project purpose The Azure platform offers some of the most extensive and advanced controls for protecting security and privacy of customer data.\nThe reference architecture in this repository is intended to showcase some of these controls making Azure a great choice for hosting mission critical workloads. As context for this exercise, rather than developing a fictitious workload, we will adopt a familiar (at least in the European Union), mission critical, distributed, and open-source workload. This choice will allow us to focus on the cloud deployment and configuration best practices, leveraging existing code for the workload itself.\nIntroducing the “EU Digital Green Ceritificates” project The “EU Digital Green Ceritificates” project (aka “EU Digital Covid Certificates” project, hereforth EU DCC), is intended to facilitate free movement of EU citizens in compliance to a common set of COVID regulations and allowing for some level of per-country customization. It was Developed by Deutsche Telekom and SAP and shared as open source for implementation and hosting by all EU member countries. The repository for the project can be found here.\nHigh level architecture The project includes three main sets of components:\n EU Digital COVID Cert Gateway. This is a centrally hosted component designed to faciliate the management and distribution of public keys from each member country to all others. Reference workloads for member countries. A set of components offered as sample implementations for various services like certificate issuing, verification services, and business rule services. These are intended for deployment by each EU member country. Reference mobile apps. Lastly, in order to help implement mobile applications for storing COVID certificates (for citizens) and verifying compliance status (for businesses, public venues, and border patrol), sample applications for Android and iOS platforms are included.  Credits Many thanks to all contributors to the EU Digital Green Certificates projects. We leverage their work in this reference architecture and we are thankful for the opportunity they provided.\nGuiding principles for the Azure reference architecture The EU DCC project itself does not prescribe how the reference components should be deployed or hosted leaving some key design choices to each implementation team. The following are some of the principles guiding our design choices for the Azure reference architecture.\n All user-identifiable information is encrypted in transit, and at rest with Customer Managed Keys (CMK) The infrastructure control plane follows best practices and limits access at authorisation, network and application levels Immutable, declaritive configuration and deployment management  In addition, to represent a sample EU country deploying their components, we have chosen to use Ireland as an example (see the eudcc-ie folder in the repo).\nSee the Deep dives section for more information.\nRead about the project prerequisites.\n","categories":"","description":"","excerpt":"Project purpose The Azure platform offers some of the most extensive …","ref":"/background/","tags":"","title":"Background"},{"body":"Requirements    Name Version      terraform \u003e= 1.0    azurerm =2.71.0    helm =2.2.0    kubectl =1.11.2    kubernetes =2.4.1    null =3.1.0    random =3.1.0    Providers    Name Version      azurerm =2.71.0    helm =2.2.0    kubectl =1.11.2    kubernetes =2.4.1    null =3.1.0    random =3.1.0    Modules No modules.\nResources    Name Type     azurerm_container_registry.acr resource   azurerm_disk_encryption_set.aks_encryption_set resource   azurerm_dns_ns_record.dns_delegation resource   azurerm_dns_zone.dns resource   azurerm_key_vault.keyvault resource   azurerm_key_vault_key.aks_encryption_key resource   azurerm_key_vault_key.mysql_encryption_key resource   azurerm_key_vault_secret.mysql_pw resource   azurerm_kubernetes_cluster.aks resource   azurerm_log_analytics_linked_service.log_analytics_linked_service resource   azurerm_log_analytics_solution.anti_malware resource   azurerm_log_analytics_solution.azure_activity resource   azurerm_log_analytics_solution.change_tracking resource   azurerm_log_analytics_solution.container_insights resource   azurerm_log_analytics_solution.key_vault_analytics resource   azurerm_log_analytics_solution.network_monitoring resource   azurerm_log_analytics_solution.security_insights resource   azurerm_log_analytics_solution.service_map resource   azurerm_log_analytics_solution.sql_assessment_plus resource   azurerm_log_analytics_solution.updates resource   azurerm_log_analytics_workspace.log_analytics_workspace resource   azurerm_monitor_diagnostic_setting.acr_diagnostic_logs resource   azurerm_monitor_diagnostic_setting.keyvault_diagnostic_logs resource   azurerm_monitor_diagnostic_setting.mysql_diagnostic_logs resource   azurerm_mysql_active_directory_administrator.mysql_aadadmin resource   azurerm_mysql_server.mysql resource   azurerm_mysql_server_key.mysql_encryption_key resource   azurerm_network_security_group.nsg resource   azurerm_network_security_rule.haproxy_ingress_allow_http resource   azurerm_network_security_rule.haproxy_ingress_allow_https resource   azurerm_policy_set_definition.policy_set_definition resource   azurerm_private_dns_zone.private_dns_zone_acr resource   azurerm_private_dns_zone.private_dns_zone_aks resource   azurerm_private_dns_zone.private_dns_zone_keyvault resource   azurerm_private_dns_zone.private_dns_zone_mysql resource   azurerm_private_dns_zone_virtual_network_link.private_dns_zone_acr_link resource   azurerm_private_dns_zone_virtual_network_link.private_dns_zone_acr_link_dev resource   azurerm_private_dns_zone_virtual_network_link.private_dns_zone_aks_link resource   azurerm_private_dns_zone_virtual_network_link.private_dns_zone_aks_link_dev resource   azurerm_private_dns_zone_virtual_network_link.private_dns_zone_keyvault_link resource   azurerm_private_dns_zone_virtual_network_link.private_dns_zone_keyvault_link_dev resource   azurerm_private_dns_zone_virtual_network_link.private_dns_zone_mysql_link resource   azurerm_private_dns_zone_virtual_network_link.private_dns_zone_mysql_link_dev resource   azurerm_private_endpoint.acr_private_endpoint resource   azurerm_private_endpoint.keyvault_private_endpoint resource   azurerm_private_endpoint.mysql_private_endpoint resource   azurerm_public_ip.haproxy_ingress_pip resource   azurerm_resource_group.rg resource   azurerm_resource_group_policy_assignment.aks_acr_policy resource   azurerm_resource_group_policy_assignment.aks_baseline_policy resource   azurerm_resource_group_policy_assignment.resource_group_policy_assignment resource   azurerm_role_assignment.aks_acr resource   azurerm_role_assignment.aks_encryption_set resource   azurerm_role_assignment.aks_identity_dns_contributer resource   azurerm_role_assignment.aks_managed_rg_mio resource   azurerm_role_assignment.aks_managed_rg_vmc resource   azurerm_role_assignment.aks_mio resource   azurerm_role_assignment.external_dns_identity_dns_contributor resource   azurerm_role_assignment.keyvault_admin_group_ra resource   azurerm_role_assignment.mysql_kv_role_assignment resource   azurerm_subnet.subnet resource   azurerm_subnet_network_security_group_association.nsg_assoc resource   azurerm_user_assigned_identity.aks_identity resource   azurerm_user_assigned_identity.external_dns_identity resource   azurerm_user_assigned_identity.mysql_aadadmin_identity resource   azurerm_virtual_network.vnet resource   azurerm_virtual_network_peering.from-dev resource   azurerm_virtual_network_peering.to-dev resource   helm_release.aad_pod_identity resource   helm_release.cert_manager resource   helm_release.csi_secrets_store_provider resource   helm_release.external_dns resource   helm_release.haproxy_ingress resource   kubectl_manifest.cert_manager_clusterissuer_letsencrypt resource   kubectl_manifest.external_dns_azure_identity resource   kubectl_manifest.external_dns_azure_identity_binding resource   kubernetes_namespace.aad_pod_identity resource   kubernetes_namespace.cert_manager resource   kubernetes_namespace.external_dns resource   kubernetes_namespace.haproxy_ingress resource   null_resource.aks_delay_before_consent resource   null_resource.import-image resource   null_resource.keyvault_admin_group_ra_delay_before_consent resource   null_resource.keyvault_private_endpoint_delay_before_consent resource   null_resource.mysql_delay_before_consent resource   random_password.mysql_pw resource   azurerm_client_config.current data source   azurerm_resource_group.aks_managed_rg data source    Inputs    Name Description Type Default Required      administrator_group_oid OID of the Group to grant Administrator permissions string n/a yes    dev_vnet_id Dev VNet ID string n/a yes    dev_vnet_name Dev VNet Name string n/a yes    dev_vnet_rg_name Dev VNet RG Name string n/a yes    generation Generation number to be appended to certain resource names (e.g. Purge Protected KeyVault’s). Changing this value can only be done during a fresh deployment. number n/a yes    jump_box_identity_file The RSA Key for the Jump Box, required for remote executing code over SSH string n/a yes    jump_box_identity_host The Host address for the Jump Box, required for remote executing code over SSH string n/a yes    jump_box_identity_user The User for the Jump Box to authenticate, required for remote executing code over SSH string n/a yes    location Location Name string n/a yes    name Environment Name string n/a yes    parent_dns_zone_name Parent DNS Zone Name string n/a yes    parent_dns_zone_rg_name Parent DNS Zone Resource Group Name string n/a yes    prefix Prefix string n/a yes    aad_pod_identity_chart_version n/a string \"4.1.1\" no    aad_pod_identity_image_tag n/a string \"v1.8.0\" no    aad_pod_identity_immutable_uamis A list of immutable UAMI clien IDs for AAD Pod Identity. These IDs, once added to a node, will not be removed list(any) [] no    acr_imports Map of ACR Imports to perform map(any) {} no    azure_key_vault_provider_image_tag n/a string \"v0.1.0\" no    cert_manager_chart_version n/a string \"1.4.0\" no    cert_manager_image_tag n/a string \"v1.4.0\" no    csi_node_driver_registrar_image_tag n/a string \"v2.2.0\" no    csi_secrets_store_provider_azure_chart_version n/a string \"0.1.0\" no    enable_log_analytics_workspace Enable the creation of azurerm_log_analytics_workspace and azurerm_log_analytics_solution or not bool false no    external_dns_chart_version n/a string \"5.1.3\" no    external_dns_image_tag n/a string \"0.8.0-debian-10-r26\" no    haproxy_ingress_chart_version n/a string \"v0.13.0-beta.2\" no    haproxy_ingress_image_tag n/a string \"v0.13.0-beta.2\" no    kube_syslog_sidecar_image_digest n/a string \"sha256:f948c128ad982b3676269542da1d9e4339f5553a9fc6831b02edf21a667620d9\" no    kube_syslog_sidecar_image_tag n/a string \"v0.0.1-f948c12\" no    livenessprobe_csi_driver_image_tag n/a string \"v2.3.0\" no    log_analytics_cluster_id Enable the sending of Azure Log Workspace to Log Analytics Analytics Custer ID supplied string null no    log_analytics_workspace_sku The SKU (pricing level) of the Log Analytics workspace. For new subscriptions the SKU should be set to PerGB2018 string \"PerGB2018\" no    log_retention_in_days The retention period for the logs in days number 30 no    secrets_store_csi_driver_image_tag n/a string \"v0.1.0\" no    secrets_store_driver_crds_image_tag n/a string \"v0.1.0\" no    Outputs    Name Description      acr_login_server n/a    aks_client_certificate n/a    aks_client_key n/a    aks_cluster_ca_certificate n/a    aks_password n/a    aks_private_fqdn n/a    aks_username n/a    dns_zone_name n/a    keyvault_id n/a    keyvault_name n/a    keyvault_uri n/a    mysql_aadadmin_identity_client_id n/a    mysql_aadadmin_identity_id n/a    mysql_aadadmin_identity_name n/a    mysql_server_fqdn n/a    mysql_server_name n/a    private_dns_zone_mysql_id n/a    rg_id n/a    rg_location n/a    rg_name n/a    subnet_id n/a    vnet_id n/a    vnet_name n/a    ","categories":"","description":"","excerpt":"Requirements    Name Version      terraform \u003e= 1.0    azurerm =2.71.0 …","ref":"/terraform/modules/base-infra/","tags":"","title":"Base Infrastructure Terraform Module"},{"body":"Azure Prerequisites  An active Azure account A subscription available for deployment into, where you have Owner privileges TODO: What do we do with TF State?  DNS Domain Name / Zone resource in Azure The reference architecture takes advantage of Azure DNS for create and allocate DNS host names to service APIs and web endpoints programmatically through code.\nPlease see the following guide for setting up a domainin in Azure DNS.\nRequired Azure Preview features Please ensure that the following Azure Preview features listed in the table below are registered on the Azure subscription.\n   Name Documentation Name Space Feature Flag Description Azure PowerShell Command Azure CLI Command     Host-based encryption on Azure Kubernetes Service (AKS) docs.microsoft.com “Microsoft.Compute” “EncryptionAtHost” The data stored on the VM host of your AKS agent nodes' VMs is encrypted at rest and flows encrypted to the Storage service. This means the temp disks are encrypted at rest with platform-managed keys Register-AzProviderFeature -FeatureName \"EncryptionAtHost\" -ProviderNamespace \"Microsoft.Compute\" az feature register --namespace \"Microsoft.Compute\" --name \"EncryptionAtHost\"    After applying all the feature registrations, please check that the registration state have fully registered, as it may take a few minutes, before deploying this reference architecture.\nPowerShell Get-AzProviderFeature -FeatureName \"\u003cFeature_Flag\u003e\" -ProviderNamespace \"\u003cNAME_SPACE\u003e\" AZ CLI az feature show --namespace \"\u003cNAME_SPACE\u003e\" --name \"\u003cFeature_Flag\u003e\" Read about setting up Azure DNS in the next section.\n","categories":"","description":"Common prerequisites necessary for all deployment methods\n","excerpt":"Common prerequisites necessary for all deployment methods\n","ref":"/prerequisites/common/","tags":"","title":"Common"},{"body":"Requirements    Name Version      terraform \u003e= 1.0    azurerm =2.71.0    http =2.1.0    kubectl =1.11.2    Providers No providers.\nModules    Name Source Version      eu_dev_jumpbox ../terraform-modules/dev-jumpbox n/a    ie_dev_jumpbox ../terraform-modules/dev-jumpbox n/a    Resources No resources.\nInputs    Name Description Type Default Required      administrator_group_oid OID of the Group to grant Administrator permissions. This is used to allow access to the deployed AKS cluster for deployments and troubleshooting string n/a yes    location Location Name string n/a yes    subscription_id Subscription to deploy into string n/a yes    tenant_id Tenant to deploy into string n/a yes    jumpbox_ssh_source_address_prefixes List of network prefixes allowed to SSH to Jumpbox VM list(string) [] no    prefix Resource Name Prefix. Should be less than 6 chars. This is used to make sure some resource names are globally unique for some azure resources that require unique names (like Key Vault and Azure Container Registries) string \"\" no    Outputs    Name Description      eu_rg_name n/a    eu_vnet_id n/a    eu_vnet_name n/a    ie_rg_name n/a    ie_vnet_id n/a    ie_vnet_name n/a    ","categories":"","description":"Docs for the development deployment\n","excerpt":"Docs for the development deployment\n","ref":"/terraform/dev/","tags":"","title":"Development Terraform Stack"},{"body":"Private Link Azure Private Link enables you to access Azure PaaS Services and Azure-hosted customer-owned/partner services over a Private Endpoint in your virtual network. Traffic between your virtual network and the service traverses over the Microsoft backbone network, eliminating exposure from the public Internet. You can also create your own Private Link Service in your virtual network and deliver it privately to your customers.\nThis reference architecture utilizes Private Link’s security \u0026 privacy benefiting from eliminating exposure from the public Internet and opting into the whole infrastructure being inaccessible from the Internet, apart from a jump-box and ingress functionality.\nPrivate Link Resources The following table lists all Resources in both EU and IE regions Private Link Networks.\n   Name DNS Zone     ACR privatelink.azurecr.io   AKS privatelink.\u003cregion location\u003e.azmk8s.io   Key Vault privatelink.vaultcore.azure.net   MySQL Server privatelink.mysql.database.azure.com    Read about Key Vault in the next section.\n","categories":"","description":"Deep Dive into Private Link\n","excerpt":"Deep Dive into Private Link\n","ref":"/deep-dives/private-link/","tags":"","title":"Private Link"},{"body":"Prerequisites You must have a domain name available to test with that you can host in Azure DNS. You must have full control of this domain. Full control includes the ability to set the name server (NS) records for the domain.\nCreate a DNS zone  Go to the Azure portal to create a DNS zone. Search for and select DNS zones. Select Create DNS zone. On the Create DNS zone page, enter the following values, and then select Create. For example:    Setting Example Value Details     Resource group edgc-dns-rg Create a resource group. The resource group name must be unique within the subscription that you selected. The location of the resource group has no impact on the DNS zone. Note to reference this resource group as parent_dns_zone_rg_name in terraform.tfvars config file.   Zone child leave unchecked Since this zone is not a child zone you should leave this unchecked   Name contoso.com Field for your parent zone name. Note to DNS as parent_dns_zone_name in terraform.tfvars config file.   Location North Europe This field is based on the location selected as part of Resource group creation      Retrieve name servers Before you can delegate your DNS zone to Azure DNS, you need to know the name servers for your zone.\n With the DNS zone created, in the Azure portal Favorites pane, select All resources. On the All resources page, select your DNS zone. Retrieve the name servers from the DNS zone page. the assigned ns will look similar to: ns1-01.azure-dns.com, ns2-01.azure-dns.net, ns3-01.azure-dns.org, and ns4-01.azure-dns.info.  Delegate the domain Once the DNS zone gets created and you have the name servers, you’ll need to update the parent domain with the Azure DNS name servers. Each registrar has its own DNS management tools to change the name server records for a domain.\n In the registrar’s DNS management page, edit the NS records and replace the NS records with the Azure DNS name servers. When you delegate a domain to Azure DNS, you must use the name servers that Azure DNS provides. Use all four name servers, regardless of the name of your domain. Domain delegation doesn’t require a name server to use the same top-level domain as your domain. Once All Azure NS have been set and podagated, you can verify the DNS by testing with the follwoing command to verify the NS records.  For Windows verify DNS in command pronmpt nslookup -type=SOA contoso.com For linux/Mac verify DNS in command pronmpt dig contoso.com Applying DNS values to terraform.tfvars Here are the relavent DNS varables required for terraform.tfvars file.\n.. parent_dns_zone_name = \"contoso.com\" parent_dns_zone_rg_name = \"edgc-dns-rg\" .. Read about the Visual Studio Code Dev Container in the next section.\n","categories":"","description":"This guide shows the following steps to create a Custom DNS in Azure DNS aswell as adding the correct Varables for the Configuration to be utilized by The Reference Architecture.\n","excerpt":"This guide shows the following steps to create a Custom DNS in Azure …","ref":"/prerequisites/azure-dns/","tags":"","title":"Azure DNS - Setting Up a Custom DNS within Azure DNS"},{"body":"How to use this guide and target audience This guide is intended to accompany the “Azure reference architecture for the EU Digital COVID Certificate project” repository. It includes pre-requisites information, developers' environment configuration, deployment steps, validation steps, and covers the principles guiding the reference architecture design decisions.\nThis documentation assumes a technical audience versed in cloud hosting concepts and familiar with the Azure platform. While sections of this guide can be consumed in any order, we recommend the reader to start with the background section and follow the reference links for full context of this project.\nRead about the project background.\n","categories":"","description":"","excerpt":"How to use this guide and target audience This guide is intended to …","ref":"/","tags":"","title":"EU Digital COVID Certificate - Azure Reference Architecture"},{"body":"Requirements    Name Version      terraform \u003e= 1.0    azurerm =2.71.0    helm =2.2.0    kubectl =1.11.2    kubernetes =2.4.1    Providers    Name Version      azurerm 2.71.0    helm 2.2.0    kubernetes 2.4.1    terraform n/a    Modules    Name Source Version      base_infra ../terraform-modules/base-infrastructure n/a    Resources    Name Type     azurerm_key_vault_certificate.trustanchor_certificate resource   azurerm_key_vault_secret.trustanchor_alias resource   azurerm_mysql_database.mysql_db resource   azurerm_role_assignment.dgc_gateway_identity_kv_role_assignment resource   azurerm_user_assigned_identity.dgc_gateway_identity resource   helm_release.dgc_gateway resource   kubernetes_namespace.dgc_gateway resource   terraform_remote_state.dev data source    Inputs    Name Description Type Default Required      administrator_group_oid OID of the Group to grant Administrator permissions string n/a yes    ghcr_password GitHub Container Registry Password string n/a yes    ghcr_username GitHub Container Registry Username string n/a yes    jump_box_identity_file The RSA Key for the Jump Box, required for remote executing code over SSH string n/a yes    jump_box_identity_host The Host address for the Jump Box, required for remote executing code over SSH string n/a yes    jump_box_identity_user The User for the Jump Box to authenticate, required for remote executing code over SSH string n/a yes    location Location Name string n/a yes    parent_dns_zone_name Parent DNS Zone Name string n/a yes    parent_dns_zone_rg_name Parent DNS Zone Resource Group Name string n/a yes    subscription_id Subscription to deploy into string n/a yes    tenant_id Tenant to deploy into string n/a yes    enable_log_analytics_workspace Enable the creation of azurerm_log_analytics_workspace and azurerm_log_analytics_solution or not bool false no    gateway_version Version Number of the Gateway string \"1.1.3-44c8778-azure-0.0.1-5f09fbf\" no    generation Generation number to be appended to certain resource names (e.g. Purge Protected KeyVault’s). Changing this value can only be done during a fresh deployment. number 1 no    log_analytics_cluster_id Enable the sending of Azure Log Workspace to Log Analytics Analytics Custer ID supplied string null no    prefix Resource Name Prefix. Should be less than 6 chars. This is used to make sure some resource names are globally unique for some azure resources that require unique names (like Key Vault and Azure Container Registries) string \"\" no    utility_image_tag Tag of the Utility Image to import string \"0.0.1-c5b4119\" no    Outputs    Name Description      dgc_gateway_fqdn The fqdn for the EU DGC Gateway used by the per member country deployments    ","categories":"","description":"Docs for the EU Gateway deployment terraform\n","excerpt":"Docs for the EU Gateway deployment terraform\n","ref":"/terraform/eu/","tags":"","title":"EU Terraform Stack"},{"body":"Requirements    Name Version      terraform \u003e= 1.0    azurerm =2.71.0    tls =3.1.0    Providers    Name Version      azurerm =2.71.0    http n/a    tls =3.1.0    Modules No modules.\nResources    Name Type     azurerm_linux_virtual_machine.jumpbox_vm resource   azurerm_network_interface.jumpbox_vm_nic resource   azurerm_network_interface_security_group_association.jumpbox_nsg_association resource   azurerm_network_security_group.jumpbox_nsg resource   azurerm_public_ip.jumpbox_vm_pip resource   azurerm_resource_group.rg resource   azurerm_role_assignment.jumpbox_vm_aad_admins resource   azurerm_role_assignment.jumpbox_vm_aad_users resource   azurerm_subnet.subnet resource   azurerm_virtual_machine_extension.jumpbox_vm_aad resource   azurerm_virtual_network.vnet resource   tls_private_key.jumpbox_vm_ssh resource   azurerm_client_config.current data source   http_http.local_external_ip data source    Inputs    Name Description Type Default Required      administrator_group_oid OID of the Group to grant Administrator permissions string n/a yes    jumpbox_ssh_source_address_prefixes List of prefixes allowed to SSH to Jumpbox VM list(string) n/a yes    location Location Name string n/a yes    name Environment Name string n/a yes    prefix Prefix string \"\" no    Outputs    Name Description      rg_id n/a    rg_location n/a    rg_name n/a    subnet_id n/a    vnet_id n/a    vnet_name n/a    ","categories":"","description":"","excerpt":"Requirements    Name Version      terraform \u003e= 1.0    azurerm =2.71.0 …","ref":"/terraform/modules/jumpbox/","tags":"","title":"Jumpbox Terraform Module"},{"body":"Background and Further Reading Azure Key Vault is a cloud service for securely storing and accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, or cryptographic keys.\nFor more information on Azure Key Vault please refer to the product documentation.\nAzure Key Vault RBAC This reference architecture’s implementation of Azure Key Vault has enabled RBAC authorization as standard. Azure Key Vault RBAC is a new feature (~Feb 2021) which provides the ability to have separate permissions on individual keys, secrets, and certificates. This reduces the number of Key Vaults needed to maintain minimal access rights.\nFor more information on Azure Key Vault RBAC please refer to the product documentation.\nAzure Spring PropertySource Each of the upstream Spring based applications has been configured to use a Azure KeyVault Spring PropertySource. This allows the applications to load certain Spring properties from KeyVault, however it requires us to use a specific naming pattern for the KeyVault items. The table below shows which naming pattern is used for each key.\nSee the Azure Key Vault Secrets Spring Boot starter client library for Java documentation and algorithm for more details.\nAzure Key Vault Provider for Secrets Store CSI Driver (AKS) The Azure Key Vault provider for Secrets Store CSI driver allows us to get secret contents stored in an Azure Key Vault instance and use the Secrets Store CSI driver interface to mount them into Kubernetes Pods.\nThis reference architecture uses this CSI Driver to mount the various certificates into the approperiate Kubernetes Pod’s filesystem. This method was chosen as it reduced the number of upstream code changes necessary, however, ideally this would be replaced with direct integration with KeyVault, discussed in the next section below.\nFor more information on this CSI driver please refer to the upstream documentation.\nFuture: Direct integration of KeyVault into the upstream applications Ideally, each of the upstream applications would never require access to read the various certificate private keys from Key Vault and they would instead integrate directly with the Key Vault sigining APIs. This would significantly reduce the risk of accidentally exposing private keys in the event of a misconfigration, malware, breach or other security incident by storing the Private Keys in a non-exportable HSM backed key.\nDue to the number of changes that would be necessary to the upstream codebase, we chose to not implement this as part of this reference architecture, however we would recommend this be implemented for any production workloads.\nEU Key Vault The following table lists all items in the EU Key Vault, along with a short description of their purpose.\n   Name Type Naming Scheme Description     trustanchor Certificate Freeform Root Certificate Authority (CA) Private Key and Certificate bundle   dgc-trustanchor-certificatealias Secret Spring PropertySource The certificate alias to use from within the trustanchor bundle   mysql-pw Secret Freeform The Azure MySQL Administrative User Password. Unused by the Reference Architecture, however may be necessary for day to day opereations in a production environment   mysql-encryption-key Key Freeform Encryption key used for Azure MySQL Customer Managed Key   aks-encryption-key Key Freeform Encryption key used for Azure Kubernetes Service Customer Managed Key    IE Key Vault The following table lists all items in the IE Key Vault, along with a short description of their purpose.\n   Name Type Naming Scheme Description     trustanchor-content Secret Freeform Root Certificate Authority (CA) Private Key and Certificate bundle   dgc-gateway-connector-trustanchor-password Secret Spring PropertySource Password for the trustanchor bundle   dgc-gateway-connector-trustanchor-alias Secret Spring PropertySource The certificate alias to use from within the trustanchor bundle   msal-authentication-client-secret Secret Freeform The Application Client Secret used for AAD Authentication on the Issuance Web Portal   tls-trust-store-content Secret Freeform The TLS Trust Store bundle in PKCS #12 format. This is used for HTTP Public Key Pinning on all HTTP connections.   dgc-gateway-connector-tlstruststore-password Secret Spring PropertySource Password for the TLS Trust Store bundle   tls-key-store Certificate Freeform The TLS Key Store bundle contains the Auth certificate which is used to Authenticate a country to the EU Gateway   dgc-gateway-connector-tlskeystore-alias Secret Spring PropertySource The certificate alias to use from within the TLS Key Store bundle   upload-key-store Certificate Freeform The Upload Key Store bundle contains the Upload certificate which is used to sign uploads from a country to the EU Gateway   dgc-gateway-connector-uploadkeystore-alias Secret Spring PropertySource The certificate alias to use from within the Upload Key Store bundle   dsc-key-store Certificate Freeform The DSC Key Store bindle contains the Document Signer Certificates which are used to sign end user Digital Covid Certificates   issuance-certalias Secret Spring PropertySource The certificate alias to use from within the DSC Key Store bindle   mysql-pw Secret Freeform The Azure MySQL Administrative User Password. Unused by the Reference Architecture, however may be necessary for day to day operations in a production environment   mysql-encryption-key Key Freeform Encryption key used for Azure MySQL Customer Managed Key   aks-encryption-key Key Freeform Encryption key used for Azure Kubernetes Service Customer Managed Key    Read about Customer managed keys in the next section.\n","categories":"","description":"Deep Dive into Key Vault\n","excerpt":"Deep Dive into Key Vault\n","ref":"/deep-dives/key-vault/","tags":"","title":"Key Vault"},{"body":"There are several options available to deploy this reference architecture listed below, please ensure you complete the Common prerequisites and one of either VS Code DevContainer, GitHub Codespaces or Manual prerequisites.\nThe VS Code DevContainer or GitHub Codespaces deployment methods are highly recommended over the Manual method.\n","categories":"","description":"","excerpt":"There are several options available to deploy this reference …","ref":"/prerequisites/","tags":"","title":"Prerequisites"},{"body":"","categories":"","description":"","excerpt":"","ref":"/deployment/","tags":"","title":"Deployment"},{"body":"Background and Further Reading The EU Digital Covid Certificate project uses and generates many different certificates and certificate authorities (CAs). A summary of the most important certificates and CAs has been included in the table below. For a full list of these, please refer to the upstream documentation for complete documentation of these certificates and CAs.\n   Owner Name Signed By CA Description     EU Trustanchor Self-Signed Root Certificate Authority (CA)   Country Auth Trustanchor The Auth cert is used to authenthicate against the EU Gateway for read operations   Country Upload Trustanchor The Upload cert is used to authenthicate against the EU Gateway for upload (write) operations   Country CSCA Trustanchor The Country Signing Certificate Authority (CSCA) is used to sign Document Signer Certificates   Country DSC Country CSCA The Document Signer Certificates (DSC) are used to sign individual Digital Covid Certificates   Individual DCC Country DSC The Digital Covid Certificate (DCC) that is issused to members of the general public    Generating the required certificates for the Reference Architecture Use the following command from the root folder of the Git clone to automatically generate the necessary certs for use in a test environment. For a production deployment, please refer to the upstream dgc-participating-countries project for guidance on generating certificates, safe handling of certificates, and onboarding those certificates to the EU gateway.\n$ make certs [ .. SNIP .. ] Signing IE Auth Cert Signing IE CSCA Cert Signing IE Upload Cert DONE Read about deployment in the next section.\n","categories":"","description":"Generate Required Certificates\n","excerpt":"Generate Required Certificates\n","ref":"/deployment/certificates/","tags":"","title":"Certificate Generation"},{"body":"Customer Managed Keys Service Encryption provides a layer of encryption for customer data-at-rest giving customers two options for encryption key management: Microsoft-managed keys or Customer-managed Key. When using Microsoft-managed keys, Microsoft online services automatically generate and securely store the root keys used for Service Encryption.\nCustomers with requirements to control their own root encryption keys can use Service Encryption with Customer-managed Key. Using Customer-managed Key, customers can generate their own cryptographic keys using either an on-premises Hardware Service Module (HSM) or Azure Key Vault (AKV). Customer root keys are stored in AKV, where they can be used as the root of one of the keychains that encrypts customer files. Customer root keys can only be accessed indirectly by Microsoft online service code for data encryption and cannot be accessed directly by Microsoft employees.\nWe use CMK to ensure that the cloud provider does not have access to the medical information of the citizens how have Digital COVID Certs issued by this system.\nWe have the Key Vault service generate the 2 keys used (details below) in a HSM backed key slot, ensuring the key is generated in a HSM and it cannot be exported from the HSM by the customer, or the cloud provider, and we grant limited access to the keys for the services that need access to use them. This means that the AKS service has access to the AKS key, but not the MySQL key, and visa versa. We also restrict the operations on this key to the bare minimum - so this key will only be able to wrap and unwrap other keys.\nMySQL The MySQL server has its data encrypted by a Data Encryption Key (DEK), which itself is encrypted by a Key Encryption Key, which is stored in Key Vault, and has access controls applied to it. These controls mean that if the MySQL server Managed Identity has its access revoked, it can no longer access the DEK, which means it cannot access the encrypted data.\nThere is more documentation for this here - https://docs.microsoft.com/en-us/azure/mysql/concepts-data-encryption-mysql\nAKS For AKS we have enabled encryption of Kubernetes Persistent Volumes (using the Azure Disks Storage Class), and the OS Disks, using a CMK.\nThis ensures any data stored in Kubernetes is encrypted at rest, using a DEK that has been wrapped by a KEK, that is stored in the Key Vault. Revoking the AKS clusters managed identity’s access to the key will mean that AKS can no longer decrypt the key, and as such cannot decrypt the data.\nThere is more documentation for this here - https://docs.microsoft.com/en-us/azure/aks/azure-disk-customer-managed-keys\nKey Vault Options For this example we chose a Key Vault Premium instance and used HSM backed keys for the KEK, that are generated on the HSM. This gives a good level of protection from the KEK being leaked (as it never leaves the HSM), but may not fufil specific FIPS level requirements, or other regulations. For these cases, a Managed HSM may be required.\nThis can support importing KEKs from an onsite HSM that ensures the import never leaves a HSM boundary, while allowing customers to have secure external backups of the key.\nAs Managed HSMs use a similar API to KeyVault, any changes needed to use a Managed HSM would be minimal.\nFor lower security requirements, software backed encryption keys can also be used for CMK, for reduced cost, and easier, but less secure backup.\nTable of Service which Use Customer-Managed Keys    Service Key Name Key role assignment scope Key Type Key Size Key Options     AKS aks-encryption-key AKS User Assigned Identity RSA-HSM 2048 unwrapKey, wrapKey   MySQL Server mysql-encryption-key MySQL Server System Assigned Identity RSA-HSM 2048 unwrapKey, wrapKey    Read about AAD configuration in the next section.\n","categories":"","description":"Deep Dive into Customer Managed Keys\n","excerpt":"Deep Dive into Customer Managed Keys\n","ref":"/deep-dives/cmk/","tags":"","title":"Customer Managed Keys"},{"body":"Requirements    Name Version      terraform \u003e= 1.0    azuread =1.6.0    azurerm =2.71.0    helm =2.2.0    kubectl =1.11.2    kubernetes =2.4.1    null =3.1.0    random =3.1.0    Providers    Name Version      azuread 1.6.0    azurerm 2.71.0    helm 2.2.0    kubernetes 2.4.1    null 3.1.0    random 3.1.0    terraform n/a    Modules    Name Source Version      base_infra ../terraform-modules/base-infrastructure n/a    Resources    Name Type     azuread_application.msal_authentication resource   azuread_application_password.msal_authentication resource   azuread_service_principal.msal_authentication resource   azurerm_key_vault_certificate.dsc_key_store_certificate resource   azurerm_key_vault_certificate.tls_key_store_certificate resource   azurerm_key_vault_certificate.upload_key_store_certificate resource   azurerm_key_vault_secret.dsc_key_store_alias resource   azurerm_key_vault_secret.msal_authentication_client_secret resource   azurerm_key_vault_secret.tls_key_store_alias resource   azurerm_key_vault_secret.tls_trust_store_content resource   azurerm_key_vault_secret.tls_trust_store_password resource   azurerm_key_vault_secret.trustanchor_alias resource   azurerm_key_vault_secret.trustanchor_content resource   azurerm_key_vault_secret.trustanchor_password resource   azurerm_key_vault_secret.upload_key_store_alias resource   azurerm_mysql_database.businessrule_service_db resource   azurerm_mysql_database.issuance_service_db resource   azurerm_mysql_database.verifier_service_db resource   azurerm_role_assignment.dgca_businessrule_service_kv_role_assignment resource   azurerm_role_assignment.dgca_issuance_service_kv_role_assignment resource   azurerm_role_assignment.dgca_issuance_service_public_kv_role_assignment resource   azurerm_role_assignment.dgca_verifier_service_kv_role_assignment resource   azurerm_role_assignment.msal_identity_kv_role_assignment resource   azurerm_user_assigned_identity.dgca_businessrule_service_identity resource   azurerm_user_assigned_identity.dgca_issuance_service_identity resource   azurerm_user_assigned_identity.dgca_issuance_service_public_identity resource   azurerm_user_assigned_identity.dgca_issuance_web_identity resource   azurerm_user_assigned_identity.dgca_verifier_service_identity resource   azurerm_user_assigned_identity.msal_authentication resource   helm_release.dgca_businessrule_service resource   helm_release.dgca_issuance_service resource   helm_release.dgca_issuance_service_public resource   helm_release.dgca_issuance_web resource   helm_release.dgca_verifier_service resource   helm_release.msal_authentication resource   kubernetes_namespace.dgca_businessrule_service resource   kubernetes_namespace.dgca_issuance_service resource   kubernetes_namespace.dgca_issuance_service_public resource   kubernetes_namespace.dgca_issuance_web resource   kubernetes_namespace.dgca_verifier_service resource   null_resource.upsert_rules resource   random_uuid.web_auth_oauth2_scope resource   azuread_client_config.current data source   terraform_remote_state.dev data source   terraform_remote_state.eu data source    Inputs    Name Description Type Default Required      administrator_group_oid OID of the Group to grant Administrator permissions. This is used to allow access to the jumpboxes for deployments and troubleshooting string n/a yes    ghcr_password GitHub Container Registry Password string n/a yes    ghcr_username GitHub Container Registry Username string n/a yes    jump_box_identity_file The RSA Key for the Jump Box, required for remote executing code over SSH string n/a yes    jump_box_identity_host The Host address for the Jump Box, required for remote executing code over SSH string n/a yes    jump_box_identity_user The User for the Jump Box to authenticate, required for remote executing code over SSH string n/a yes    location Location Name string n/a yes    parent_dns_zone_name Parent DNS Zone Name string n/a yes    parent_dns_zone_rg_name Parent DNS Zone Resource Group Name string n/a yes    subscription_id Subscription to deploy into string n/a yes    tenant_id Tenant to deploy into string n/a yes    businessrule_service_version Version Number of the Business Rules Service string \"1.1.2-b0be8f4-azure-0.0.1-1293959\" no    enable_log_analytics_workspace Enable the creation of azurerm_log_analytics_workspace and azurerm_log_analytics_solution or not bool false no    generation Generation number to be appended to certain resource names (e.g. Purge Protected KeyVault’s). Changing this value can only be done during a fresh deployment. number 1 no    issuance_service_version Version Number of the Issuance Service string \"1.0.5-7408b55-azure-0.0.1-1293959\" no    issuance_web_version Version Number of the Issuance Web string \"1.1.2-45daa28-azure-0.0.1-1293959\" no    log_analytics_cluster_id Enable the sending of Azure Log Workspace to Log Analytics Analytics Custer ID supplied string null no    msal_proxy_version version of the msal docker image to use string \"latest\" no    nginx_image_tag Tag of the Nginx Image to import string \"1.21.1\" no    prefix Resource Name Prefix. Should be less than 6 chars. This is used to make sure some resource names are globally unique for some azure resources that require unique names (like Key Vault and Azure Container Registries) string \"\" no    utility_image_tag Tag of the Utility Image to import string \"0.0.1-c5b4119\" no    verifier_service_version Version Number of the Verifier Service string \"1.0.4-5888cb7-azure-0.0.1-1293959\" no    Outputs    Name Description      businessrule_service_url The url where the business rule backend can be accessed    issuance_service_url The url where the issuance backend can be accessed    issuance_web_address The web address where the issuance website can be accessed    verifier_service_url The url where the verifier service backend can be accessed    ","categories":"","description":"Docs for the EU Gateway deployment terraform\n","excerpt":"Docs for the EU Gateway deployment terraform\n","ref":"/terraform/ie/","tags":"","title":"Ireland Terraform Stack"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mobile-apps/","tags":"","title":"Mobile Applications"},{"body":"This repository includes configuration for a DevContainer, allowing for repeatable and reliable usage in VS Code or using GitHub Codespaces.\nThis document describes it’s use within a VS Code. For other options, see here.\nDownload and install Docker Docker is required for running the DevContainer, please follow the Docker installation guidance for your platform.\nDownload and install VS Code Visual Studio Code is Microsoft’s free IDE, it can be downloaded here: Visual Studio code.\nInstall required VS Code extensions The “Remote - Containers” extension is required to use a DevContainer, it is not installed by default. Please follow the installation instructions for installing this extension.\nClone the respository and open in a DevContainer Once the repository has been cloned, VS code will prompt to open the repository in a container, if this would not happen, it can be triggered by the command palete (CMD+Shift+p) and selecting the command ‘Reopen in container’. The first time, vs code automatically will build and run the container locally, attaching the IDE UI to it.\nOnce container has been opened, please go to the deployment page of the docs.\nOpen a Terminal within DevContainer To open a Terminal within the DevContainer, press Ctrl+Shift+P (Cmd+Shift+P on OSX), and begin to type “Terminal”. Choose the “Terminal: Create New Terminal” option and press return.\nRead about using Github codespaces in the next section.\n","categories":"","description":"Prerequisites necessary for deployment using a VS Code DevContainer\n","excerpt":"Prerequisites necessary for deployment using a VS Code DevContainer\n","ref":"/prerequisites/devcontainer/","tags":"","title":"VS Code DevContainer"},{"body":"","categories":"","description":"","excerpt":"","ref":"/deep-dives/","tags":"","title":"Deep Dives"},{"body":"This repository includes configuration for a DevContainer, allowing for repeatable and reliable usage in GitHub Codespaces or using VS Code DevContainer.\nThis document describes it’s use within a GitHub Codespaces. For other options, see here.\nPrepare GutHub Orginsation To use Codespaces, you must enable codespaces for your organization. Please follow the GitHub documentation, if Codespaces has not already been enabled.\nFork the respository and open in Codespaces Navigate to the Reference Architecture GitHub Repository, and choose the “Fork” button from the upper right hand side of the page \u0026 choose the approperiate organisation.\nOnce the fork has been created - Choose the green “Code” button at the upper left of the page, select the CodeSpaces tab, select “New Codespace” and finally, select the machine type. We recommend the smallest machine type, that is the 2 core \u0026 4GB RAM option.\nGitHub will take several minutes to build the Codespace, once complete, proceed to the section below.\nOpen a Terminal within Codespaces To open a Terminal within the Codespace, press Ctrl+Shift+P (Cmd+Shift+P on OSX), and begin to type “Terminal”. Choose the “Terminal: Create New Terminal” option and press return.\nRead about manual deployment in the next section.\n","categories":"","description":"Prerequisites necessary for deployment using GitHub Codespaces\n","excerpt":"Prerequisites necessary for deployment using GitHub Codespaces\n","ref":"/prerequisites/github-codespaces/","tags":"","title":"GitHub Codespaces"},{"body":"Azure Active Directory (AAD) Authentication This reference architecture utilises Azure Active Directory (AAD) for Authentication where possible to do so. Fortifying the integrity of the whole system by removing stored passwords. User accounts and Managed Identities are used through and reference architecture in place of passwords.\nAAD authentication for Azure Kubernetes Service Within Azure Kubernetes Service (AKS), (AAD Pod Identity)[https://github.com/Azure/aad-pod-identity#readme] creates identities and bindings as Kubernetes primitives that allow pods to access Azure resources that authenticates AAD as an identity provider.\nThis reference architecture uses AAD Pod Identity on all service containers.\nEach service containers' managed identities is granted least privilege rights to the resources it consumes, for example, single secret RBAC grants within Key Vault or single database access within Azure Database for MySQL.\nAAD authentication for Key Vault Key Vault is configured to use RBAC based on AAD, please refer to the Key Vault section for more information.\nAAD authentication for Azure Database for MySQL Authentication to Databases' with static passwords or shared credentials stored in internal systems may be a security and privacy risk, as credentials may become exposed due to over sharing the passwords to other parties or not being having a short rotation policy.\nThis reference architecture implements AAD authentication for MySQL on all deployed MySQL servers which enables authentication via short life tokens instead of passwords for applications connecting to Azure Database for MySQL.\nAAD authentication for Web Authentication The verification and the authentication of users who have the correct authority to create a certificate on an issuing service is paramount, straightening the issuing web service with AAD allowing the ability for Organization level access levels and User and Groups policies.\nWeb Authentication to the certificate issuing service with AAD is documented in detail in the Deployment Section of the documentation.\nRead about Log Analytics in the next section.\n","categories":"","description":"Deep Dive into AAD authentication\n","excerpt":"Deep Dive into AAD authentication\n","ref":"/deep-dives/aad/","tags":"","title":"AAD authentication"},{"body":"Set Variables Below is a starter set of variables needed to deploy a simple example of the stack.\nA full set of options is documented in the Terraform section.\nWe used a combined terraform.tfvars for all three steps, so combine any extra options needed into this single file.\nCreate a terraform.tfvars at the root of the repo that contains:\nprefix = \"\u003cprefix\u003e\" location = \"northeurope\" subscription_id = \"\u003cid\u003e\" tenant_id = \"\u003cid\u003e\" parent_dns_zone_name = \"contoso.com\" parent_dns_zone_rg_name = \"\u003cid\u003e\" administrator_group_oid = \"\u003cid\u003e\" jumpbox_ssh_source_address_prefixes = [] ghcr_username = \"\u003cGH Username\u003e\" ghcr_password = \"\u003cGH Password / Token\u003e\"    Name Description Type Default Required      prefix Resource Name Prefix. Should be less than 6 chars. This is used to make sure some resource names are globally unique for some azure resources that require unique names (like Key Vault and Azure Container Registries) string \"\" no    location Location Name string n/a yes    subscription_id Subscription to deploy into string n/a yes    tenant_id Tenant to deploy into string n/a yes    parent_dns_zone_name Parent DNS Zone Name string n/a yes    parent_dns_zone_rg_name Parent DNS Zone Resource Group Name string n/a yes    administrator_group_oid OID of the Group to grant Administrator permissions. This is used to allow access to the deployed AKS cluster for deployments and troubleshooting string n/a yes    jumpbox_ssh_source_address_prefixes List of network prefixes allowed to SSH to Jumpbox VM list(string) [] no    ghcr_password GitHub Container Registry Password string n/a yes    ghcr_username GitHub Container Registry Username string n/a yes    Deployment We offer two ways of doing the install, and all in one deployment, or a step by step, which can help you understand the difference resources, groups and terraform stacks.\nAll In One Deployment Once the variables file has been created, the process of creating the infrastructure and deploying the application has been automated though terraform and scripts. Before initialing the deployment, Azure cli (az) must be logged in, you can log in by running az login. After logged, the process can be started by running make on the base directory of the project. This will create the required certificates and start the terraform deployment of the different components described in the step by step process.\n➜ /workspaces/eu-digital-covid-certificates-reference-architecture (main) $ make Step by Step Deployment This section describes how to apply each step manually instead of getting invoked by the main make.\nStep by Step - Terraform workspaces Deployment is done via terraform, which supports workspaces for isolation between different deployments of the same infrastructure. In this case, we use the variable defined in prefix to create different terraform workspaces, so multiple users can perform a deployment in the same subscription. Running make workspace will go to the different terraform stacks and adjust the namespace.\n➜ /workspaces/eu-digital-covid-certificates-reference-architecture (main) $ make workspace Step by Step - Certificates As describes in certificates doc section, project relies on certificates to ensure security as well as the green digital certificate itself. The process of generating the certificates has been automated in an script, it can be invoked with the required arguments/variables by make certs command.\n➜ /workspaces/eu-digital-covid-certificates-reference-architecture (main) $ make certs Step by Step - Jumpboxes For security, none of the services used in this deployment, uses public endpoints (except of course the load balances), this prevents any public IP reaching the Databases or Key vault. This means that before connecting Kubernetes cluster (AKS) to perform deployments, we need to connect to jumphosts that have private connectivity to the services.\nThis step is performed by moving to the eudgc-dev and executing make. The first part of this make target will create the infrastructure for the jumpboxes using terraform, once the VMs are ready, it will create ssh configuration files (in eudgc-dev/jumpbox-ssh-configs folder) to facilitate the access to it as well as establishing the required tunnels to reach AKS clusters.\n➜ /workspaces/eu-digital-covid-certificates-reference-architecture (main) $ cd eudcc-dev/ ➜ /workspaces/eu-digital-covid-certificates-reference-architecture/eudcc-dev (main) $ make Step by Step - EU Infrastructure Each country service, relies on the “central” european gateway. The folder eudgc-eu contains the folder with the infrastructure and deployment of the gateway. The default make target (all), will first establish the required ssh tunnels to start the proxy in the VNET where the deployment will be made, enabling the deployment of the application after the AKS cluster is up and running.\n➜ /workspaces/eu-digital-covid-certificates-reference-architecture/eudcc-dev (main) $ cd ../ ➜ /workspaces/eu-digital-covid-certificates-reference-architecture (main) $ cd eudcc-eu/ ➜ /workspaces/eu-digital-covid-certificates-reference-architecture/eudcc-eu (main) $ make Step by Step - IE Infrastructure The main applications of this deployment are the validation and rules services, that are deployed by each country and the mobile apps will contact to. Those services, as well as the EU are deployed into a kubernetes (AKS) cluster, applying the same security principles, only the HTTPS services being exposed. All the infrastructure and deployment is done via terraform, in the folder eudgc-ie.\n➜ /workspaces/eu-digital-covid-certificates-reference-architecture/eudcc-eu (main) $ cd ../ ➜ /workspaces/eu-digital-covid-certificates-reference-architecture (main) $ cd eudcc-ie/ ➜ /workspaces/eu-digital-covid-certificates-reference-architecture/eudcc-ie (main) $ make Read about validation in the next section.\n","categories":"","description":"Deploy the EU Digital Green Certificate Reference Architecture\n","excerpt":"Deploy the EU Digital Green Certificate Reference Architecture\n","ref":"/deployment/deployment/","tags":"","title":"Deployment"},{"body":"This document describes manual deployment prerequisites. This deployment method is not recommended. For other options, see here.\nIf you would like to run the deployment on your PC without a container, this is a list of the tools required to complete the deployment. The exact versions of the tools used, where the version is important, can be found in the Dockerfile.\nThe following are needed for a deployment:\n Git Make Azure CLI Azure CLI SSH extension Terraform jq Kubectl Java JDK 11  Once the tooling is installed and the code has been checked out, please proceed to the deployment page of this docs.\n","categories":"","description":"Prerequisites necessary for manual deployment\n","excerpt":"Prerequisites necessary for manual deployment\n","ref":"/prerequisites/manual/","tags":"","title":"Manual"},{"body":"Issue a Certificate Navigate to the Issuance Web Portal Issuing a Vaccine, Test or Recovery Certificate will validate that most of the components are up and running successfully, so this shoud be the first validation performed.\nOpen the Issuance Web Portal in your web browser by opening the following URL, replacing the two placeholders with the matching values from your terraform.tfvars file:\nhttps://dgca-issusance-web.eudcc-ie.\u003cprefix\u003e.\u003cparent_dns_zone_name\u003e/ For example, the complete URL would be https://dgca-issusance-web.eudcc-ie.tst.contoso.com/ if your terraform.tfvars had the following options:\nprefix = \"tst\" parent_dns_zone_name = \"contoso.com\" Login to the Issuance Portal Once you have determined the URL of the Issuance Web Portal and visted the URL in your browser, you will be presented with a login screen. Please login using your Azure Active Directory credentials.\nOnce logged in, the Issuance Web Portal homepage should be presented:\nIssue a Vaccination Certificate Choose the Record Vaccination Certification option, complete the required form fields, and choose Next to submit:\nOnce submitted, you will be presented with the Vaccine Certificate:\nImport the Certificate into the Wallet Android App TODO..\nVerify a Certificate using the Verifier Android App TODO..\nIndividual Component Validations SSH to EU or IE Jumpboxes During the creation of the eudgc-dev terraform stack, a Jumpbox is created for each of the EU and IE stacks, allowing secure access the Azure resources deployed. To SSH into these Jumpboxes, you can use the Azure CLI SSH extention which is preinsalled in the Codespace and DevContainer.\n   Stack Command     EU az ssh vm -g eudcc-eu -n eudcc-eu-dev-jumpbox-vm   IE az ssh vm -g eudcc-ie -n eudcc-ie-dev-jumpbox-vm    Access AKS Begin by SSHing to the approperiate EU or IE Jumpbox, and the proceed with the steps below.\nLogin to Azure CLI Start by logging into the Azure CLI, and selecting the correct subscription:\n$ az login $ az account set -s \u003csubscription_id\u003e Login and Inspect the AKS Cluster Next, login to the AKS Cluster:\n$ az aks get-credentials -g eudcc-eu -n eudcc-eu-aks $ kubectl get pods --all-namespaces Read about web authentication in the next section.\n","categories":"","description":"Validation the deployment of the EU Digital Green Certificate Reference Architecture\n","excerpt":"Validation the deployment of the EU Digital Green Certificate …","ref":"/deployment/validation/","tags":"","title":"Validation"},{"body":"Issuance Web Authentication By default, when we deploy the issuance web application, the application is setup to allow all members of the AAD tenant to log into and issue certs.\nThis is due to the need for an admin to grant consent to applications that have been directly assigned to users without their direct consent recorded in the AAD portal.\nRestricting Access to Specific users  Navigate to the Active directory blade in the Azure portal. Search for the application name (The URL for issuance web that is printed at the end of the make terraform command, minus the “https://\") e.g. “dgca-issuance-web.eudcc-ie.example.com” Click on the “enterprise application” result Click on properties Switch “User assignment required?” to “Yes” Click on “Users and Groups” Click “Add User/Group” Search for either the user you want to grant access, or the group that contains the users you want to add Leave role as “Default Access” Click “Assign” Click “Permissions” Click “Grant admin consent for ORG”  ","categories":"","description":"Issuance Web Authentication Setup\n","excerpt":"Issuance Web Authentication Setup\n","ref":"/deployment/web-authentication/","tags":"","title":"Issuance Web Authentication Setup"},{"body":"Azure Log Analytics The Azure Log Analytics agent collects telemetry from Azure resources, on-premises machines, and machines monitored by System Center Operations Manager and sends the collected data to your Log Analytics Workspace in Azure Monitor. The Log Analytics agent also supports insights and other services in Azure Monitor such as VM insights and Azure Security Center.\nAzure Log Analytics Workspaces Log Analytics is a tool in the Azure portal to edit and run log queries from data collected by Azure Monitor Logs and interactively analyze their results. You can use Log Analytics queries to retrieve records that match particular criteria, identify trends, analyze patterns, and provide a variety of insights into your data.\nAzure Log Analytics Cluster Azure Monitor Logs Dedicated Clusters are a deployment option that enables advanced capabilities for Azure Monitor Logs customers. Customers can select which of their Log Analytics workspaces should be hosted on dedicated clusters. Capabilities that require dedicated clusters currently include: Customer-managed Keys, Double encryption, Availability Zones, Lockbox and Multi-workspace.\n NOTE: Dedicated clusters require customers to commit for at least 500 GB of data ingestion per day.\n Linking Log Analytics Workspaces to a Log Analytics Cluster in your current subscription  To link an existing Log Analytics Cluster to a COVID 19 EU Digital Green Certificate Project’s Log Analytics Workspaces, finstly enable enable_log_analytics_workspace to true and add the resource id of the cluster in log_analytics_cluster_id in terraform.tfvars  ... enable_log_analytics_workspace = true log_analytics_cluster_id = \"\u003cid\u003e\" ... Azure Log Analytics Solution Monitoring solutions in Azure Monitor provide analysis of the operation of an Azure application or service.\nAzure Log Analytics Solutions table    Log Analytics Solution Publisher Product Description     ContainerInsights Microsoft OMSGallery/ContainerInsights Container insights is a feature designed to monitor the performance of container workloads.   KeyVaultAnalytics Microsoft OMSGallery/KeyVaultAnalytics Key Vault insights provides comprehensive monitoring of your key vaults by delivering a unified view of your Key Vault requests, performance, failures, and latency.   SecurityInsights Microsoft OMSGallery/SecurityInsights Microsoft Azure Sentinel is a scalable, cloud-native, security information event management (SIEM) and security orchestration automated response (SOAR) solution. Azure Sentinel delivers intelligent security analytics and threat intelligence across the enterprise, providing a single solution for alert detection, threat visibility, proactive hunting, and threat response.The Azure Sentinel PowerShell module (Az.SecurityInsights) allows you to interact with the following components: * Incidents * Analytics Rules (Alert Rules)   NetworkMonitoring Microsoft OMSGallery/NetworkMonitoring Network Monitoring insights is a feature designed to monitor the performance of Network Monitoring traffic.   ServiceMap Microsoft OMSGallery/ServiceMap Service Map automatically discovers application components on Windows and Linux systems and maps the communication between services. With Service Map, you can view your servers in the way that you think of them: as interconnected systems that deliver critical services. Service Map shows connections between servers, processes, inbound and outbound connection latency, and ports across any TCP-connected architecture, with no configuration required other than the installation of an agent.   AzureActivity Microsoft OMSGallery/AzureActivity The Activity log is a platform log in Azure that provides insight into subscription-level events. This includes such information as when a resource is modified or when a virtual machine is started. You can view the Activity log in the Azure portal or retrieve entries with PowerShell and CLI. This article provides details on viewing the Activity log and sending it to different destinations.   Updates Microsoft OMSGallery/Updates Enable Update Management using Azure Resource Manager template   ChangeTracking Microsoft OMSGallery/ChangeTracking    AntiMalware Microsoft OMSGallery/AntiMalware    SecurityInsights Microsoft OMSGallery/SecurityInsights    SQLAssessmentPlus Microsoft OMSGallery/SQLAssessmentPlus     Azure Log Analytics Diagnostic Setting Manages a Diagnostic Setting for an existing Resource\nAzure Log Analytics Diagnostic Setting table    Resource Log Metric     KeyVault AuditEvent AllMetrics   ACR ContainerRegistryRepositoryEvents ContainerRegistryLoginEvents   MySQL Server MySqlAuditLogs, MySqlSlowLogs AllMetrics   AKS oms_agent oms_agent    Read about Terraform in the next section.\n","categories":"","description":"Deep Dive into Azure Log Analytics workspaces and linking to an Azure Log Analytics Cluster.\n","excerpt":"Deep Dive into Azure Log Analytics workspaces and linking to an Azure …","ref":"/deep-dives/log-analytics/","tags":"","title":"Azure Log Analytics"},{"body":"As the base infrastructures for the stacks are very similar, we have abstracted them into modules.\n","categories":"","description":"","excerpt":"As the base infrastructures for the stacks are very similar, we have …","ref":"/terraform/modules/","tags":"","title":"Terraform Modules"},{"body":"","categories":"","description":"","excerpt":"","ref":"/terraform/","tags":"","title":"Terraform Docs (Autogenerated)"}]